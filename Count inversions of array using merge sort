#include<stdio.h>
#include<time.h>

int mergfunc(int arr[], int tmp[], int left , int mid , int right)
{
  int i;
  int j;                        // code for merging the arrays
  int k;
  i = left;
  j = mid;
  k = left;
  int invcount = 0;

  while( (j <= right) && (i <= mid -1) )
  {
     if(arr[i] >= arr[j])
     {
       tmp[k++] = arr[j++];
        invcount = invcount + (mid - 1);
     }

     else
     {
         tmp[k++] = arr[j++]; 
     }

  }
  
  if( j <= right)
  {
       tmp[k++] = arr[j++];
  }

  if( i <= mid - 1)
  {
     tmp[k++] = arr[i++];
  }

  for( i=left ; i <= right ; i++)
  {
      arr[i] = tmp[i];
  }
return invcount;
}

int mergesortalgorithm(int arr[], int tmp[], int left, int right)
{
  int mid;
  int invcount = 0;
  if(right > left)
  {
     mid = (left + right)/2;
     invcount = mergesortalgorithm(arr, tmp, left, mid);
     invcount = invcount + mergesortalgorithm(arr, tmp, mid+1 , right);
     invcount = invcount + mergfunc(arr, tmp, left, mid+1, right);    // reccursion
  }
return invcount;
}

int Inversealgorithm(int arr[], int n)
{
   int tmp[n];
   return mergesortalgorithm(arr, tmp, 0, n - 1);
}


int main()
{
  clock_t start, end;
  double cpu_time_used;                 // reading array from file
  start = clock();                      //  computing algorith time
  FILE *fp;
  fp = fopen("filename" , "r");
  int array[50000];
  int i = 0;
  for(i=0;i<50000;i++)
  {
    fscanf(fp, "%d" , &array[i]);
  }

  fclose(fp);
  printf("Number of inversions in the given text file is: %d\n" , Inversealgorithm(array , i));
  end = clock();
  cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
  printf("Time in seconds taken by algorithm: %lf\n", cpu_time_used);
  return 0;
}

